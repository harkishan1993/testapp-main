// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Front {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  image       Json
  updatedAt   DateTime @updatedAt
}

model Product {
  id                    Int                     @id @default(autoincrement())
  name                  String
  slug                  String                  @unique
  image                 Image[]
  isslider              Slider                  @default(false)
  description           Description?
  specification         Specification?
  CategoriesOnCategorys CategoriesOnCategorys[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now()) @updatedAt
}

enum Slider {
  false
  true
}

model Category {
  id                    Int                     @id @default(autoincrement())
  name                  String
  Subcategory           Subcategory[]
  CategoriesOnCategorys CategoriesOnCategorys[]
}

model Description {
  id          Int     @id @default(autoincrement())
  description String  @db.Text
  product     Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId   Int     @unique
}

model Specification {
  id            Int     @id @default(autoincrement())
  specification String  @db.Text
  product       Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId     Int     @unique
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String   @db.Text
  Product   Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int?
}

model Subcategory {
  id         Int      @id @default(autoincrement())
  name       String
  category   Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId Int
}

model CategoriesOnCategorys {
  producs    Product  @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId Int
  createdAt  DateTime @default(now())

  @@id([productId, categoryId])
}
